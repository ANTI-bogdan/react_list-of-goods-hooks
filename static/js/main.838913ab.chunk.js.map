{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preperedGoods","sort","good1","good2","localeCompare","reverse","getPreparedGoods","className","type","cn","onClick","length","map","good","ReactDOM","render","document","getElementById"],"mappings":"uPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SA6BnB,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EA/BR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAuB,YAAOD,GAmBpC,OAjBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EACH,OAAOY,EAAME,cAAcD,GAC7B,KAAKZ,EACH,OAAOW,EAAMR,GAAaS,EAAMT,GAClC,QACE,OAAO,MAKXE,GACFI,EAAcK,UAGTL,EAOwBM,CAC7BjB,EACAK,EACAE,GAUF,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IAAG,iBACD,CAAE,WAAYf,IAAcJ,IAEhCoB,QAAS,kBAAMf,EAAaL,IAN9B,iCAWA,wBACEkB,KAAK,SACLD,UACEE,IAAG,oBACD,CAAE,WAAYf,IAAcH,IAEhCmB,QAAS,kBAAMf,EAAaJ,IAN9B,4BAWA,wBACEiB,KAAK,SACLD,UACEE,IAAG,oBACD,CAAE,YAAab,IAEnBc,QAAS,kBAAMb,GAAeD,IANhC,wBAWIF,EAAUiB,QAAUf,IAEpB,wBACEY,KAAK,SACLD,UAAU,4BACVG,QAhDa,WACvBf,EAAa,IACTC,GACFC,GAAeD,IA0CT,sBAWN,6BACGE,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCjHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.838913ab.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: string,\n  isReversed: boolean,\n): string[] {\n  const preperedGoods: string[] = [...goods];\n\n  if (sortField) {\n    preperedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n        case SORT_FIELD_LENGTH:\n          return good1[sortField] - good2[sortField];\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preperedGoods.reverse();\n  }\n\n  return preperedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods: string[] = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReversed,\n  );\n\n  const handleResetClick = () => {\n    setSortField('');\n    if (isReversed) {\n      setIsReversed(!isReversed);\n    }\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button is-info',\n              { 'is-light': sortField !== SORT_FIELD_ALPHABET })\n          }\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button is-success',\n              { 'is-light': sortField !== SORT_FIELD_LENGTH })\n          }\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button is-warning',\n              { 'is-light': !isReversed })\n          }\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(!!sortField.length || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleResetClick}\n            >\n              Reset\n            </button>\n          )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}